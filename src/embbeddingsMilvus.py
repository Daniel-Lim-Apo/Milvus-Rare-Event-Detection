from pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection
from sentence_transformers import SentenceTransformer

# Step 1: Load the text file
def load_text_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    return [line.strip() for line in lines]

# Step 2: Generate embeddings
def generate_embeddings(lines, model):
    embeddings = model.encode(lines, convert_to_tensor=True)
    return embeddings

# Connect to Milvus server
connections.connect("default", host="localhost", port="19530")

# Define the schema
fields = [
    FieldSchema(name="id", dtype=DataType.INT64, is_primary=True, auto_id=True),
    FieldSchema(name="embedding", dtype=DataType.FLOAT_VECTOR, dim=384)
]
schema = CollectionSchema(fields, description="Text embeddings collection")

# Create the collection
collection = Collection(name="text_embeddings", schema=schema)

# Load the text file
lines = load_text_file('data.txt')

# Load the model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Generate embeddings
embeddings = generate_embeddings(lines, model)

# Prepare the data for insertion
data = [
    [i for i in range(len(lines))],  # ids (could be auto-generated by Milvus, but providing here for clarity)
    embeddings.tolist()
]

# Insert data into the collection
collection.insert(data)

# Optionally, create an index on the embeddings for faster search
index_params = {
    "index_type": "IVF_FLAT",
    "params": {"nlist": 128},
    "metric_type": "COSINE"
}
collection.create_index(field_name="embedding", index_params=index_params)

# Load the collection into memory
collection.load()
